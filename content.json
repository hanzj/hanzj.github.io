[{"title":"dataTables SpringMVC 中的数据绑定","date":"2017-03-24T06:00:34.672Z","path":"2017/03/24/datatables-springmvc/","text":"在使用datatables通过ajax获取服务端数据时，因为datatables参数复杂，导致Spring MVC无法自动绑定对象。 前端报DataTables warning: table id=example1 - Ajax error. For more information about this error, please see http://datatables.net/tn/7 后台报警告: Handler execution resulted in exception: org.springframework.beans.InvalidPropertyException: Invalid property ‘columns[0][data]’ of bean class [...DataTable]: Property referenced in indexed property path ‘columns[0][data]’ is neither an array nor a List nor a Map; returned value was [...Columns@5ba60222]datatables提交的原始json格式如下：1234567891011121314151617181920212223242526272829303132&#123; \"draw\":1, \"columns\":[ &#123; \"data\":0, \"name\":\"\", \"searchable\":true, \"orderable\":false, \"search\":&#123; \"value\":\"\", \"regex\":false &#125; &#125;, &#123; \"data\":1, \"name\":\"\", \"searchable\":true, \"orderable\":false, \"search\":&#123; \"value\":\"\", \"regex\":false &#125; &#125; ], \"order\":[], \"start\":0, \"length\":-1, \"search\":&#123; \"value\":\"\", \"regex\":false &#125;&#125; jQuery Ajax会将上述json序列化成如下的字符串123456789101112131415161718draw=1&amp;columns[0][data]=0&amp;columns[0][name]=&amp;columns[0][searchable]=true&amp;columns[0][orderable]=false&amp;columns[0][search][value]=&amp;columns[0][search][regex]=false&amp;columns[1][data]=1,columns[1][name]=&amp;columns[1][searchable]=true&amp;columns[1][orderable]=false&amp;columns[1][search][value]=&amp;columns[1][search][regex]=false&amp;order=0&amp;start=0&amp;length=-1&amp;search[value]=&amp;search[regex]=false 对于一个对象object内部的字段field而言，转成object.field才是容易理解的，而object[field]，更让人理解为object是一个map集合对象。因此spring会将object[0][field]认为是List,object[0].field才会被认为是一个对象的字段。所以，解决方法就是重写jQuery的序列化方法，也就是buildParams方法，让column[0][data]变为column[0].data123456789101112131415161718192021222324252627282930313233343536function buildParams( prefix, obj, traditional, add ) &#123; var name; if ( jQuery.isArray( obj ) ) &#123; // Serialize array item. jQuery.each( obj, function( i, v ) &#123; if ( traditional || rbracket.test( prefix ) ) &#123; // Treat each array item as a scalar. add( prefix, v ); &#125; else &#123; // Item is non-scalar (array or object), encode its numeric index. buildParams( prefix + \"[\" + ( typeof v === \"object\" &amp;&amp; v != null ? i : \"\" ) + \"]\", v, traditional, add ); &#125; &#125; ); &#125; else if ( !traditional &amp;&amp; jQuery.type( obj ) === \"object\" ) &#123; // Serialize object item. for ( name in obj ) &#123; //buildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add ); buildParams( prefix + \".\" + name , obj[ name ], traditional, add ); &#125; &#125; else &#123; // Serialize scalar item. add( prefix, obj ); &#125;&#125; 参考：http://stackoverflow.com/questions/5900840/post-nested-object-to-spring-mvc-controller-using-json","tags":[{"name":"datatables","slug":"datatables","permalink":"http://yoursite.com/tags/datatables/"},{"name":"springmvc","slug":"springmvc","permalink":"http://yoursite.com/tags/springmvc/"}]},{"title":"Hello World","date":"2017-03-05T10:52:42.274Z","path":"2017/03/05/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]}]